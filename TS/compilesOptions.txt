
compilesOptions
-strict


strict: true 설정 기본. 

description: "Enable all strict type checking options"
(엄격하게 옵션을 활성화 하다)
옵션을 전부다 켜다

아래와 같은 옵션을 전부다 켠다

--noImplicitAny
명시적이지 않게 any 타입을 사용하여, 표현식과 선언에 사용하면, 에러를 발생
<code>
    //noImplicitAny
    fuction noImplicitAnyTestFunc(arg) {
        console.log(arg)
    }

- 타입스크립트가 추론을 실패하는 경우 , any 가 맞으면 any 로 지정하라
- 아무것도 쓰지 않으면 에러가 발생한다.
- 이 오류를 해결하면, any 라고 지정되어 있지 않은 경우는 any 가 아닌 것이다.(타입 추론이 되었으므로)


--noImplicitThis
명시적이지 않게 any 타입을 사용하여, this 표현식에 사용하면, 에러를 발생시킨다.


-첫번째 매개변수 자리에 this 를 놓고, this 에 대한 타입을 어떤 것이라도 표현하지 않으면, noImplicitAny 
가 오류를 발생시킨다.

-JavaScript 에서는 매개변수에 this 를 넣으면, 이미 예약된 키워드라 SyntaxError 를 발생시킨다.

-call/apply/bind 와 같이 this 를 대체하여 함수 콜을 하는 용도로 쓰인다.
-그래서 this 를 any 로 명시적으로 지정하는 것은 합리적이다. (구체적인 사용처가 있는 경우 타입을 표현 하기도 한다.)

-Class 에서는 this 를 사용하면서 noImplicitThis 와 관련한 에러가 나지 않는다(당연..)
-Class 에서 constructor 를 제외한 멤버 함수의 첫번째 매개변수도 일반 함수와 마찬가지로 this 를 사용할 수 있다.


--strictNullChecks (중요하다)
-strictNullChecks모드에서는 null 및 undefined 값이 모든 유형의 도메인에 속하지 않으며, 그자신을 타입으로 가지거나
any 일 경우에만 할당이 가능하다.

-한 가지 예외는 undefined 에 void 할당가능


*strictNullChecks 를 적용하지 않으면*
- 모든 타입은 null, undefined 값을 가질 수 있다.
- string으로 타입을 지정해도 undefined값을 할당할 수 있다는 것이다.


*strictNullChecks 를 적용하면 * 
- 모든 타입은 null, undefined 값을 가질 수 없고, 가지려면 union type 을 이용해서 직접 명시 하여야 한다.


--strictFuctionTypes 
함수 타입에 대한 bivariant 매개변수를 비활성화 합니다? Dog -> Dog ?
Grey -> Greyhound
Greyhound -> Animal
Animal -> Animal
Animal -> Greyhound

생각 해보기 


(Animal -> Greyhound) <: (Dog -> Dog)

-반환 타입은 공변적
-인자 타입은 반공변적
-타입스크립트에서 인자 타입은 공변적이면서, 반공변적인게 문제!
-이 문제를 해결하는 옵션이 strictFuctionTypes
-옵션을 켜면 에러가 안나던걸 에러 나게 한다

예시__

const button = document.querySelector('#id') as HTMLButtonElement;

button.addEventListner('keydown'(e: MouseEvent)=> {});

이전에는 위와 같은 코드도 에러를 발생시키지 않았지만, 이제는 에러가 발생하게 된다.




--strictPropertyInitialization 
정의되지 않은 클래스의 속성이 생성자에서 초기화 되었는지 확인한다.
이 옵션을 사용하려면 --strictNullChecks 를 사용하도록 설정하여야 한다.

//strictPropertyInitialization
class person {
    private _name: string;
    private _age: number;
    //선언을 하였지만 초기화 되지 않았다.
}




--strictBindCallApply
bind, call , apply 에 대한 더 엄격한 검사 수행
-Function 의 내장 함수인 bind/call/apply 를 사용할 때 엄격하게 체크하도록 하는 옵션
-bind 는 해당 함수안에서 사용할 this 와 인자를 설정해주는 역할을 하고 , call 과 apply 는 this 와
인자를 설정한 후 , 실행까지 한다.

-call 과 apply 는 인자를 설정하는 방식에서 차이점이 있다.
    -call 은 함수의 인자를 여러인자의 나열로 넣어서 사용하고, apply 는 모든 인자를 배열 하나로 넣어서 사용 한다.



--alwaysStrict
각 소스 파일에 대해 JavaScript의 strict mode로 코드를 분석하고 , "엄격하게 사용"을 해제한다.
