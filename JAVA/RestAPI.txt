REST API (자원의 상태 전달) - 네트워크 아키택쳐

1. client / setver : 클라이언트와 서버가 서로 독립적으로 분리 되어 있어야 한다.

2. Stateless : 요청에 대해서 클라이언트의 상태를 서버에 저장하지 않는다.

3. Cache : 클라이언트는 서버의 응답을 Cache(임시저장) 할 수 있어야 한다.
클라이언트가 Cache 를 통해서 응답을 재사용 할 수 있어야 하며, 이를 통해서 서버의 부하를 낮춘다.

4. 계층화 : 서버와 클라이언트 사이에 방화벽, 게이트웨이,proxy 를 다양한 계층 형태로 구성이 가능해야 하며
이를 확장 할 수 있어야 한다.

5. 인터페이스 일관성 : 인터페이스의 일관성을 지키고 아키택쳐를  단순화시켜 작은 단위로 분리하여 클라이언트
서버가 독립적으로 개선될 수 있어야 한다. 

6. Code on Demand (Optional) : 자바 애플릿, 자바스크립트 , 플래시 등 특정한 기능을 서버로 부터 클라이언트가 전달받아
코드를 실행할 수 있어야 한다. 


인터페이스 일관성이 잘 지켜졌는지 에 따라 REST 를 잘 사용했는지 판단을 할 수 있다.

1. 자원의 식별
웹기반의 REST 에서는 리소스 접근을 할때 URI 를 사용

https://junsco.kr/user/100

Resource : user

식별자 100





2. 메세지를 통한 리소스 제작

Web 에서는 다양한 방식으로 데이터를 전달 할 수 있다.
그중에서 가장 많이 사용하는 방식은 HTML. XML, JSON,TEXT 등이 있다. 

이중에서 어떠한 타입의 데이터인지를 알려주기 위해서 HTTP Header 부분에 
content-type 을 통해서 데이터의 타입을 지정해 줄수 있다.

또한  리소스 조작을 위해서 데이터 전체를 전달 하지 않고, 이를 메시지로 전달 합니다.

Ex) 서버의 user 라는 정보의 다음에는 number 라는 결정했고, 이 정보를 client 와 주고 빋을때,
그대로 사용하고 있었다면, 후에 서버의 resource 변경으로 phone-number 로 바뀌게 된다면, 
cliient 는 처리를 못하고 에러가 난다.

이러한 부분을 방지 하기 위하여 별도의 메시지 형태로 데이터를 주고 받으며, client -server 가 독립적으로 확장 가능하도록 
한다.






3. 자기 서술적 메세지 

요청하는 데이터가  어떻게 처리 되어져야 하는지 충분한 데이터를 포함 할 수 있어야 한다.
HTTP 기반의 REST 에서는 HTTP Method 외 Header 정보, 그리고 URI 의 포함되는 정보로 표현 할 수 있다.

GET : https://juns.co.kr/user/100 사용자의 정보 요청
POST :  https://juns.co.kr/user 사용자 정보 생성
PUT : https://juns.co.kr/user 사용자 정보 생성 및 수정
DELETE : https:// juns.co.kr/user/100 사용자 정보 삭제 

그 외에 담지 못한 정보들은 URI 의 메세지를 통하여 표현한다.



4. 애플리케이션 싱태에 대한 엔진으로써 하이퍼 미디어 

REST API 개발할떄 단순히 client 요청에 대한 데이터만 응답 해주는 것이 아닌 관련된 리소스에 
대한 LINK 정보같이 같이 포함되어져야 한다.

이러한 조건들을 잘 갖춘 REST ful 하다고 표현하고 이를 REST API